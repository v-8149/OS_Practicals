// 1.Shortest  Job First(NON-PREMPTIVE)

#include<bits/stdc++.h>
using namespace std;

int main() {
    int num;
    cout << "Number of Processes: ";
    cin >> num;

    int array_at[num], array_bt[num], array_ct[num], array_tat[num], array_wt[num];
    vector<pair<int, int>> processes; // To store burst time and arrival time

    cout << "Enter the ARRIVAL TIME for each process: ";
    for (int i = 0; i < num; i++) {
        cin >> array_at[i];
    }

    cout << "Enter the BURST TIME for each process: ";
    for (int i = 0; i < num; i++) {
        cin >> array_bt[i];
        processes.push_back({array_bt[i], array_at[i]});
    }

    // Sort processes based on arrival time
    sort(processes.begin(), processes.end(), [](pair<int, int>& a, pair<int, int>& b) {
        return a.second < b.second;
    });

    int currentTime = 0;
    int completed = 0;
    vector<bool> isCompleted(num, false);
    while (completed != num) {
        int minIndex = -1;
        int minBurst = INT_MAX;

        for (int i = 0; i < num; i++) {
            if (processes[i].second <= currentTime && !isCompleted[i] && processes[i].first < minBurst) {
                minBurst = processes[i].first;
                minIndex = i;
            }
        }

        if (minIndex != -1) {
            currentTime += processes[minIndex].first;
            array_ct[minIndex] = currentTime;
            array_tat[minIndex] = array_ct[minIndex] - processes[minIndex].second;
            array_wt[minIndex] = array_tat[minIndex] - processes[minIndex].first;
            isCompleted[minIndex] = true;
            completed++;
        } else {
            currentTime++;
        }
    }

    cout << "\nCOMPLETION TIME: ";
    for (int i = 0; i < num; i++) {
        cout << array_ct[i] << " ";
    }
    cout << "\nTURN AROUND TIME: ";
    for (int i = 0; i < num; i++) {
        cout << array_tat[i] << " ";
    }
    cout << "\nWAITING TIME: ";
    for (int i = 0; i < num; i++) {
        cout << array_wt[i] << " ";
    }

    return 0;
}

// 2.FIRST COME FIRST SERVE

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int num;
    cout << "Number of Processes : \n";
    cin >> num;
    int array_at[num];
    cout << "Enter the ARRIVAL TIME for each process in asscending order : \n";
    for (int i = 0; i < num; i++)
    {
        cin >> array_at[i];
       
    }
    int array_bt[num];
    cout << "Enter the BRUST for each process in asscending order : \n";
    for (int i = 0; i < num; i++)
    {
        cin >> array_bt[i];
       
    }
    int array_ct[num];
    int array_tat[num];
    int array_wt[num];
    int bt=0;
    for (int i = 0; i < num; i++)
    {
        bt=bt+array_bt[i];
        array_ct[i]=array_bt[i]+bt;
    }
    for (int i = 0; i < num; i++)
    {
       
        array_tat[i]=array_ct[i]-array_at[i];
    }
    for (int i = 0; i < num; i++)
    {
       
        array_wt[i]=array_tat[i]-array_bt[i];
    }
    cout << "\n";
    cout << "COMPLETION TIME : " << " ";
    for (int i = 0; i < num; i++)
    {
       
        cout << array_ct[i] << " ";
    }
    cout << "\n";
    cout << "TURN AROUND TIME : " << " ";
    for (int i = 0; i < num; i++)
    {
       
        cout << array_tat[i] << " ";
    }
    cout << "\n";
    cout << "WAITING TIME " << " ";

    for (int i = 0; i < num; i++)
    {
       
        cout << array_wt[i] << " ";
    }
    return 0;
}

 //3.ROUND ROBIN

#include<bits/stdc++.h>
using namespace std;

int main() {
    int num, timeQuantum;
    cout << "Number of Processes: ";
    cin >> num;
    cout << "Enter Time Quantum: ";
    cin >> timeQuantum;

    int array_at[num], array_bt[num], array_ct[num] = {0}, array_tat[num], array_wt[num];
    int remaining_bt[num];
    queue<int> q;  // Queue to manage processes in a round-robin manner

    cout << "Enter the ARRIVAL TIME for each process: ";
    for (int i = 0; i < num; i++) {
        cin >> array_at[i];
    }

    cout << "Enter the BURST TIME for each process: ";
    for (int i = 0; i < num; i++) {
        cin >> array_bt[i];
        remaining_bt[i] = array_bt[i];
    }

    int currentTime = 0, completed = 0;
    vector<bool> isInQueue(num, false);

    // Initially enqueue all processes that have arrived by time 0
    for (int i = 0; i < num; i++) {
        if (array_at[i] <= currentTime) {
            q.push(i);
            isInQueue[i] = true;
        }
    }

    while (completed != num) {
        if (q.empty()) {
            currentTime++;
            for (int i = 0; i < num; i++) {
                if (array_at[i] <= currentTime && !isInQueue[i]) {
                    q.push(i);
                    isInQueue[i] = true;
                }
            }
            continue;
        }

        int index = q.front();
        q.pop();

        if (remaining_bt[index] <= timeQuantum) {
            currentTime += remaining_bt[index];
            array_ct[index] = currentTime;
            array_tat[index] = array_ct[index] - array_at[index];
            array_wt[index] = array_tat[index] - array_bt[index];
            remaining_bt[index] = 0;
            completed++;
        } else {
            currentTime += timeQuantum;
            remaining_bt[index] -= timeQuantum;
        }

        for (int i = 0; i < num; i++) {
            if (array_at[i] <= currentTime && !isInQueue[i] && remaining_bt[i] > 0) {
                q.push(i);
                isInQueue[i] = true;
            }
        }

        if (remaining_bt[index] > 0) {
            q.push(index);
        }
    }

    cout << "\nCOMPLETION TIME: ";
    for (int i = 0; i < num; i++) {
        cout << array_ct[i] << " ";
    }
    cout << "\nTURN AROUND TIME: ";
    for (int i = 0; i < num; i++) {
        cout << array_tat[i] << " ";
    }
    cout << "\nWAITING TIME: ";
    for (int i = 0; i <  num; i++) {
        cout << array_wt[i] << " ";
    }

    return 0;

}

// 4.Priority Scheduling (Preemptive)

#include <iostream>
#include <climits>
using namespace std;

struct Process {
    int id;              // Process ID
    int arrivalTime;     // Arrival time of the process
    int burstTime;       // Burst time of the process
    int priority;        // Priority of the process
    int finishTime;      // Time when the process finishes
    int waitingTime;     // Waiting time for the process
    int turnaroundTime;  // Turnaround time for the process
    int remainingTime;   // Remaining burst time
};

void calculatePriorityPreemptive(Process processes[], int n) {
    int time = 0, completed = 0, highestPriority = INT_MAX;
    int current = -1;

    while (completed < n) {
        // Find the process with the highest priority (lowest number)
        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= time && processes[i].remainingTime > 0) {
                if (processes[i].priority < highestPriority || 
                    (processes[i].priority == highestPriority && processes[i].arrivalTime < processes[current].arrivalTime)) {
                    highestPriority = processes[i].priority;
                    current = i;
                }
            }
        }

        if (current != -1) {
            // Execute the current process for 1 time unit
            processes[current].remainingTime -= 1;
            time++;

            // If the process finishes
            if (processes[current].remainingTime == 0) {
                processes[current].finishTime = time;
                processes[current].turnaroundTime = processes[current].finishTime - processes[current].arrivalTime;
                processes[current].waitingTime = processes[current].turnaroundTime - processes[current].burstTime;
                completed++;
                highestPriority = INT_MAX;  // Reset priority for the next selection
            }
        } else {
            // If no process is ready, advance time
            time++;
        }
    }
}

void printTable(Process processes[], int n) {
    cout << "ID\tArrival\tBurst\tPriority\tFinish\tTurnaround\tWaiting\n";
    for (int i = 0; i < n; i++) {
        cout << processes[i].id << "\t" << processes[i].arrivalTime << "\t"
             << processes[i].burstTime << "\t" << processes[i].priority << "\t\t"
             << processes[i].finishTime << "\t" << processes[i].turnaroundTime << "\t\t"
             << processes[i].waitingTime << "\n";
    }
}

int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;

    Process processes[n];
    cout << "Enter arrival time, burst time, and priority for each process:\n";
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        cout << "Process " << i + 1 << ": ";
        cin >> processes[i].arrivalTime >> processes[i].burstTime >> processes[i].priority;
        processes[i].remainingTime = processes[i].burstTime;  // Initialize remaining time
    }

    calculatePriorityPreemptive(processes, n);

    cout << "\nScheduling Results:\n";
    printTable(processes, n);

    return 0;
}
