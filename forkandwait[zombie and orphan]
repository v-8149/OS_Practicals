#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - 1 - i; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void selectionSort(int arr[], int n) {
    int i, j, minIdx, temp;
    for (i = 0; i < n - 1; i++) {
        minIdx = i;
        for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIdx]) {
                minIdx = j;
            }
        }
        temp = arr[minIdx];
        arr[minIdx] = arr[i];
        arr[i] = temp;
    }
}

int main() {
    int n, i;
    pid_t pid;

    printf("Enter the number of integers to sort: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter the integers: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    pid = fork();

    if (pid < 0) {
        printf("Fork failed.\n");
        exit(1);
    } else if (pid == 0) {
        // Child process
        printf("Child process sorting using Selection Sort...\n");
        selectionSort(arr, n);
        printf("Sorted array by child process: ");
        for (i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");

        // Simulate child process becoming a zombie
        printf("Child process (PID: %d) completed and is now a zombie.\n", getpid());
        exit(0); // Child process exits, becoming a zombie
    } else {
        // Parent process
        sleep(2); // Let the child process turn into a zombie

        printf("Parent process sorting using Bubble Sort...\n");
        bubbleSort(arr, n);
        printf("Sorted array by parent process: ");
        for (i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");

        // Wait for the child process to finish, cleaning up the zombie process
        wait(NULL);
        printf("Child process (PID: %d) has been cleaned up.\n", pid);

        // Simulate parent exiting before child, creating an orphan
        printf("Parent process is exiting, making the child an orphan.\n");
        sleep(5); // Pause to observe the orphan state
        printf("Parent process (PID: %d) exiting.\n", getpid());
    }

    return 0;
}
