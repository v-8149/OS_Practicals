#include<iostream>
using namespace std;

const int P = 5;  // Number of processes
const int R = 3;  // Number of resources

// Function to check if system is in safe state
bool isSafe(int processes[], int avail[], int max[][R], int alloc[][R]) {
    int need[P][R];

    // Calculate need matrix (Need = Max - Allocation)
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    bool finished[P] = {0};

    int safeSeq[P];

    // Make a copy of available resources
    int work[R];
    for (int i = 0; i < R; i++) {
        work[i] = avail[i];
    }

    int count = 0;
    while (count < P) {
        bool found = false;
        for (int p = 0; p < P; p++) {
            if (!finished[p]) {
                int j;
                // Check if need of process is less than available resources
                for (j = 0; j < R; j++) {
                    if (need[p][j] > work[j])
                        break;
                }
                // If all needs of p are satisfied
                if (j == R) {
                    // Add allocated resources of p to work
                    for (int k = 0; k < R; k++)
                        work[k] += alloc[p][k];
                    // Mark p as finished
                    safeSeq[count++] = p;
                    finished[p] = true;
                    found = true;
                }
            }
        }

        // If no process could be found, return false
        if (!found) {
            cout << "System is not in a safe state.\n";
            return false;
        }
    }

    // If system is in a safe state
    cout << "System is in a safe state.\nSafe sequence is: ";
    for (int i = 0; i < P; i++)
        cout << safeSeq[i] << " ";
    cout << endl;

    return true;
}

int main() {
    int processes[] = {0, 1, 2, 3, 4};

    // Available instances of each resource
    int avail[] = {3, 3, 2};

    // Maximum R resources that can be allocated to each process
    int max[P][R] = {
        {7, 5, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };

    // Resources allocated to each process
    int alloc[P][R] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    // Check system state
    isSafe(processes, avail, max, alloc);

    return 0;
}
